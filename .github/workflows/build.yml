# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build & Test

on:
  push:
  pull_request:
  workflow_call:
    inputs:
      RELEASE_VERSION:
        description: "Release Version"
        type: string
        required: false
        default: ""
      RELEASE_NOTES:
        description: "Release Notes"
        type: string
        required: false
        default: ""
env:
  ARTIFACT_NAME: "ResoniteLogCleaner"
  ASSEMBLY_NAME: "ResoniteLogCleaner"
  PROJECT_FILE: "ResoniteLogCleaner.csproj"
  PROJECT_URL: "${{ github.server_url }}/${{ github.repository }}"
  PROJECT_PATH: "${{ github.workspace }}/repo"
  RELEASE_NOTES: "${{ inputs.RELEASE_NOTES }}"
  RELEASE_VERSION: "${{ inputs.RELEASE_VERSION }}"
  OUTPUT_FOLDER: "bin/Release/net8.0/win-x64/publish"
  TEST_PROJECT_FILE: "Test/Test.csproj"
defaults:
  run:
    working-directory: "./repo"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v4
      with:
        path: ${{ env.PROJECT_PATH }}
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: |
        dotnet restore "${{ env.PROJECT_FILE }}"
        #dotnet restore "${{ env.TEST_PROJECT_FILE }}"
      env:
        ASSEMBLY_NAME: ""
    - name: Check formatting
      run: |
        dotnet format --no-restore --verify-no-changes "${{ env.PROJECT_FILE }}"
        #dotnet format --no-restore --verify-no-changes "${{ env.TEST_PROJECT_FILE }}"
      env:
        ASSEMBLY_NAME: ""
    - name: Test
      run: |
        #dotnet test --no-restore --configuration "Release" "${{ env.TEST_PROJECT_FILE }}"
      env:
        ASSEMBLY_NAME: ""
    - name: Build
      run: |
        dotnet publish -r win-x64 --no-restore --configuration "Release" "${{ env.PROJECT_FILE }}"
    - name: Upload build artifacts
      if: ${{ inputs.RELEASE_VERSION }}
      uses: actions/upload-artifact@v4
      with: 
        name: "${{ env.ARTIFACT_NAME }}"
        path: "${{ env.PROJECT_PATH }}/${{ env.OUTPUT_FOLDER }}/${{ env.ASSEMBLY_NAME }}.*"
